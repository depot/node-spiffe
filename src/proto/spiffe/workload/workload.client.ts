// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "spiffe/workload/workload.proto" (syntax proto3)
// tslint:disable
import type {RpcOptions, RpcTransport, ServerStreamingCall, ServiceInfo, UnaryCall} from '@protobuf-ts/runtime-rpc'
import {stackIntercept} from '@protobuf-ts/runtime-rpc'
import type {
  JWTBundlesRequest,
  JWTBundlesResponse,
  JWTSVIDRequest,
  JWTSVIDResponse,
  ValidateJWTSVIDRequest,
  ValidateJWTSVIDResponse,
  X509BundlesRequest,
  X509BundlesResponse,
  X509SVIDRequest,
  X509SVIDResponse,
} from './workload'
import {SpiffeWorkloadAPI} from './workload'
/**
 * ///////////////////////////////////////////////////////////////////////
 * X509-SVID Profile
 * ///////////////////////////////////////////////////////////////////////
 *
 * @generated from protobuf service SpiffeWorkloadAPI
 */
export interface ISpiffeWorkloadAPIClient {
  /**
   * Fetch X.509-SVIDs for all SPIFFE identities the workload is entitled to,
   * as well as related information like trust bundles and CRLs. As this
   * information changes, subsequent messages will be streamed from the
   * server.
   *
   * @generated from protobuf rpc: FetchX509SVID(X509SVIDRequest) returns (stream X509SVIDResponse);
   */
  fetchX509SVID(input: X509SVIDRequest, options?: RpcOptions): ServerStreamingCall<X509SVIDRequest, X509SVIDResponse>
  /**
   * Fetch trust bundles and CRLs. Useful for clients that only need to
   * validate SVIDs without obtaining an SVID for themself. As this
   * information changes, subsequent messages will be streamed from the
   * server.
   *
   * @generated from protobuf rpc: FetchX509Bundles(X509BundlesRequest) returns (stream X509BundlesResponse);
   */
  fetchX509Bundles(
    input: X509BundlesRequest,
    options?: RpcOptions,
  ): ServerStreamingCall<X509BundlesRequest, X509BundlesResponse>
  // ///////////////////////////////////////////////////////////////////////
  // JWT-SVID Profile
  // ///////////////////////////////////////////////////////////////////////

  /**
   * Fetch JWT-SVIDs for all SPIFFE identities the workload is entitled to,
   * for the requested audience. If an optional SPIFFE ID is requested, only
   * the JWT-SVID for that SPIFFE ID is returned.
   *
   * @generated from protobuf rpc: FetchJWTSVID(JWTSVIDRequest) returns (JWTSVIDResponse);
   */
  fetchJWTSVID(input: JWTSVIDRequest, options?: RpcOptions): UnaryCall<JWTSVIDRequest, JWTSVIDResponse>
  /**
   * Fetches the JWT bundles, formatted as JWKS documents, keyed by the
   * SPIFFE ID of the trust domain. As this information changes, subsequent
   * messages will be streamed from the server.
   *
   * @generated from protobuf rpc: FetchJWTBundles(JWTBundlesRequest) returns (stream JWTBundlesResponse);
   */
  fetchJWTBundles(
    input: JWTBundlesRequest,
    options?: RpcOptions,
  ): ServerStreamingCall<JWTBundlesRequest, JWTBundlesResponse>
  /**
   * Validates a JWT-SVID against the requested audience. Returns the SPIFFE
   * ID of the JWT-SVID and JWT claims.
   *
   * @generated from protobuf rpc: ValidateJWTSVID(ValidateJWTSVIDRequest) returns (ValidateJWTSVIDResponse);
   */
  validateJWTSVID(
    input: ValidateJWTSVIDRequest,
    options?: RpcOptions,
  ): UnaryCall<ValidateJWTSVIDRequest, ValidateJWTSVIDResponse>
}
/**
 * ///////////////////////////////////////////////////////////////////////
 * X509-SVID Profile
 * ///////////////////////////////////////////////////////////////////////
 *
 * @generated from protobuf service SpiffeWorkloadAPI
 */
export class SpiffeWorkloadAPIClient implements ISpiffeWorkloadAPIClient, ServiceInfo {
  typeName = SpiffeWorkloadAPI.typeName
  methods = SpiffeWorkloadAPI.methods
  options = SpiffeWorkloadAPI.options
  constructor(private readonly _transport: RpcTransport) {}
  /**
   * Fetch X.509-SVIDs for all SPIFFE identities the workload is entitled to,
   * as well as related information like trust bundles and CRLs. As this
   * information changes, subsequent messages will be streamed from the
   * server.
   *
   * @generated from protobuf rpc: FetchX509SVID(X509SVIDRequest) returns (stream X509SVIDResponse);
   */
  fetchX509SVID(input: X509SVIDRequest, options?: RpcOptions): ServerStreamingCall<X509SVIDRequest, X509SVIDResponse> {
    const method = this.methods[0],
      opt = this._transport.mergeOptions(options)
    return stackIntercept<X509SVIDRequest, X509SVIDResponse>('serverStreaming', this._transport, method, opt, input)
  }
  /**
   * Fetch trust bundles and CRLs. Useful for clients that only need to
   * validate SVIDs without obtaining an SVID for themself. As this
   * information changes, subsequent messages will be streamed from the
   * server.
   *
   * @generated from protobuf rpc: FetchX509Bundles(X509BundlesRequest) returns (stream X509BundlesResponse);
   */
  fetchX509Bundles(
    input: X509BundlesRequest,
    options?: RpcOptions,
  ): ServerStreamingCall<X509BundlesRequest, X509BundlesResponse> {
    const method = this.methods[1],
      opt = this._transport.mergeOptions(options)
    return stackIntercept<X509BundlesRequest, X509BundlesResponse>(
      'serverStreaming',
      this._transport,
      method,
      opt,
      input,
    )
  }
  // ///////////////////////////////////////////////////////////////////////
  // JWT-SVID Profile
  // ///////////////////////////////////////////////////////////////////////

  /**
   * Fetch JWT-SVIDs for all SPIFFE identities the workload is entitled to,
   * for the requested audience. If an optional SPIFFE ID is requested, only
   * the JWT-SVID for that SPIFFE ID is returned.
   *
   * @generated from protobuf rpc: FetchJWTSVID(JWTSVIDRequest) returns (JWTSVIDResponse);
   */
  fetchJWTSVID(input: JWTSVIDRequest, options?: RpcOptions): UnaryCall<JWTSVIDRequest, JWTSVIDResponse> {
    const method = this.methods[2],
      opt = this._transport.mergeOptions(options)
    return stackIntercept<JWTSVIDRequest, JWTSVIDResponse>('unary', this._transport, method, opt, input)
  }
  /**
   * Fetches the JWT bundles, formatted as JWKS documents, keyed by the
   * SPIFFE ID of the trust domain. As this information changes, subsequent
   * messages will be streamed from the server.
   *
   * @generated from protobuf rpc: FetchJWTBundles(JWTBundlesRequest) returns (stream JWTBundlesResponse);
   */
  fetchJWTBundles(
    input: JWTBundlesRequest,
    options?: RpcOptions,
  ): ServerStreamingCall<JWTBundlesRequest, JWTBundlesResponse> {
    const method = this.methods[3],
      opt = this._transport.mergeOptions(options)
    return stackIntercept<JWTBundlesRequest, JWTBundlesResponse>('serverStreaming', this._transport, method, opt, input)
  }
  /**
   * Validates a JWT-SVID against the requested audience. Returns the SPIFFE
   * ID of the JWT-SVID and JWT claims.
   *
   * @generated from protobuf rpc: ValidateJWTSVID(ValidateJWTSVIDRequest) returns (ValidateJWTSVIDResponse);
   */
  validateJWTSVID(
    input: ValidateJWTSVIDRequest,
    options?: RpcOptions,
  ): UnaryCall<ValidateJWTSVIDRequest, ValidateJWTSVIDResponse> {
    const method = this.methods[4],
      opt = this._transport.mergeOptions(options)
    return stackIntercept<ValidateJWTSVIDRequest, ValidateJWTSVIDResponse>('unary', this._transport, method, opt, input)
  }
}
