// @generated by protoc-gen-es v1.3.0 with parameter "target=ts,import_extension=none"
// @generated from file spiffe/workload/workload.proto (syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf'
import {Message, Struct, proto3} from '@bufbuild/protobuf'

/**
 * The X509SVIDRequest message conveys parameters for requesting an X.509-SVID.
 * There are currently no request parameters.
 *
 * @generated from message X509SVIDRequest
 */
export class X509SVIDRequest extends Message<X509SVIDRequest> {
  constructor(data?: PartialMessage<X509SVIDRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'X509SVIDRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): X509SVIDRequest {
    return new X509SVIDRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): X509SVIDRequest {
    return new X509SVIDRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): X509SVIDRequest {
    return new X509SVIDRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: X509SVIDRequest | PlainMessage<X509SVIDRequest> | undefined,
    b: X509SVIDRequest | PlainMessage<X509SVIDRequest> | undefined,
  ): boolean {
    return proto3.util.equals(X509SVIDRequest, a, b)
  }
}

/**
 * The X509SVIDResponse message carries X.509-SVIDs and related information,
 * including a set of global CRLs and a list of bundles the workload may use
 * for federating with foreign trust domains.
 *
 * @generated from message X509SVIDResponse
 */
export class X509SVIDResponse extends Message<X509SVIDResponse> {
  /**
   * Required. A list of X509SVID messages, each of which includes a single
   * X.509-SVID, its private key, and the bundle for the trust domain.
   *
   * @generated from field: repeated X509SVID svids = 1;
   */
  svids: X509SVID[] = []

  /**
   * Optional. ASN.1 DER encoded certificate revocation lists.
   *
   * @generated from field: repeated bytes crl = 2;
   */
  crl: Uint8Array[] = []

  /**
   * Optional. CA certificate bundles belonging to foreign trust domains that
   * the workload should trust, keyed by the SPIFFE ID of the foreign trust
   * domain. Bundles are ASN.1 DER encoded.
   *
   * @generated from field: map<string, bytes> federated_bundles = 3;
   */
  federatedBundles: {[key: string]: Uint8Array} = {}

  constructor(data?: PartialMessage<X509SVIDResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'X509SVIDResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'svids', kind: 'message', T: X509SVID, repeated: true},
    {no: 2, name: 'crl', kind: 'scalar', T: 12 /* ScalarType.BYTES */, repeated: true},
    {
      no: 3,
      name: 'federated_bundles',
      kind: 'map',
      K: 9 /* ScalarType.STRING */,
      V: {kind: 'scalar', T: 12 /* ScalarType.BYTES */},
    },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): X509SVIDResponse {
    return new X509SVIDResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): X509SVIDResponse {
    return new X509SVIDResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): X509SVIDResponse {
    return new X509SVIDResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: X509SVIDResponse | PlainMessage<X509SVIDResponse> | undefined,
    b: X509SVIDResponse | PlainMessage<X509SVIDResponse> | undefined,
  ): boolean {
    return proto3.util.equals(X509SVIDResponse, a, b)
  }
}

/**
 * The X509SVID message carries a single SVID and all associated information,
 * including the X.509 bundle for the trust domain.
 *
 * @generated from message X509SVID
 */
export class X509SVID extends Message<X509SVID> {
  /**
   * Required. The SPIFFE ID of the SVID in this entry
   *
   * @generated from field: string spiffe_id = 1;
   */
  spiffeId = ''

  /**
   * Required. ASN.1 DER encoded certificate chain. MAY include
   * intermediates, the leaf certificate (or SVID itself) MUST come first.
   *
   * @generated from field: bytes x509_svid = 2;
   */
  x509Svid = new Uint8Array(0)

  /**
   * Required. ASN.1 DER encoded PKCS#8 private key. MUST be unencrypted.
   *
   * @generated from field: bytes x509_svid_key = 3;
   */
  x509SvidKey = new Uint8Array(0)

  /**
   * Required. ASN.1 DER encoded X.509 bundle for the trust domain.
   *
   * @generated from field: bytes bundle = 4;
   */
  bundle = new Uint8Array(0)

  /**
   * Optional. An operator-specified string used to provide guidance on how this
   * identity should be used by a workload when more than one SVID is returned.
   * For example, `internal` and `external` to indicate an SVID for internal or
   * external use, respectively.
   *
   * @generated from field: string hint = 5;
   */
  hint = ''

  constructor(data?: PartialMessage<X509SVID>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'X509SVID'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'spiffe_id', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 2, name: 'x509_svid', kind: 'scalar', T: 12 /* ScalarType.BYTES */},
    {no: 3, name: 'x509_svid_key', kind: 'scalar', T: 12 /* ScalarType.BYTES */},
    {no: 4, name: 'bundle', kind: 'scalar', T: 12 /* ScalarType.BYTES */},
    {no: 5, name: 'hint', kind: 'scalar', T: 9 /* ScalarType.STRING */},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): X509SVID {
    return new X509SVID().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): X509SVID {
    return new X509SVID().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): X509SVID {
    return new X509SVID().fromJsonString(jsonString, options)
  }

  static equals(
    a: X509SVID | PlainMessage<X509SVID> | undefined,
    b: X509SVID | PlainMessage<X509SVID> | undefined,
  ): boolean {
    return proto3.util.equals(X509SVID, a, b)
  }
}

/**
 * The X509BundlesRequest message conveys parameters for requesting X.509
 * bundles. There are currently no such parameters.
 *
 * @generated from message X509BundlesRequest
 */
export class X509BundlesRequest extends Message<X509BundlesRequest> {
  constructor(data?: PartialMessage<X509BundlesRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'X509BundlesRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): X509BundlesRequest {
    return new X509BundlesRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): X509BundlesRequest {
    return new X509BundlesRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): X509BundlesRequest {
    return new X509BundlesRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: X509BundlesRequest | PlainMessage<X509BundlesRequest> | undefined,
    b: X509BundlesRequest | PlainMessage<X509BundlesRequest> | undefined,
  ): boolean {
    return proto3.util.equals(X509BundlesRequest, a, b)
  }
}

/**
 * The X509BundlesResponse message carries a set of global CRLs and a map of
 * trust bundles the workload should trust.
 *
 * @generated from message X509BundlesResponse
 */
export class X509BundlesResponse extends Message<X509BundlesResponse> {
  /**
   * Optional. ASN.1 DER encoded certificate revocation lists.
   *
   * @generated from field: repeated bytes crl = 1;
   */
  crl: Uint8Array[] = []

  /**
   * Required. CA certificate bundles belonging to trust domains that the
   * workload should trust, keyed by the SPIFFE ID of the trust domain.
   * Bundles are ASN.1 DER encoded.
   *
   * @generated from field: map<string, bytes> bundles = 2;
   */
  bundles: {[key: string]: Uint8Array} = {}

  constructor(data?: PartialMessage<X509BundlesResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'X509BundlesResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'crl', kind: 'scalar', T: 12 /* ScalarType.BYTES */, repeated: true},
    {
      no: 2,
      name: 'bundles',
      kind: 'map',
      K: 9 /* ScalarType.STRING */,
      V: {kind: 'scalar', T: 12 /* ScalarType.BYTES */},
    },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): X509BundlesResponse {
    return new X509BundlesResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): X509BundlesResponse {
    return new X509BundlesResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): X509BundlesResponse {
    return new X509BundlesResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: X509BundlesResponse | PlainMessage<X509BundlesResponse> | undefined,
    b: X509BundlesResponse | PlainMessage<X509BundlesResponse> | undefined,
  ): boolean {
    return proto3.util.equals(X509BundlesResponse, a, b)
  }
}

/**
 * @generated from message JWTSVIDRequest
 */
export class JWTSVIDRequest extends Message<JWTSVIDRequest> {
  /**
   * Required. The audience(s) the workload intends to authenticate against.
   *
   * @generated from field: repeated string audience = 1;
   */
  audience: string[] = []

  /**
   * Optional. The requested SPIFFE ID for the JWT-SVID. If unset, all
   * JWT-SVIDs to which the workload is entitled are requested.
   *
   * @generated from field: string spiffe_id = 2;
   */
  spiffeId = ''

  constructor(data?: PartialMessage<JWTSVIDRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'JWTSVIDRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'audience', kind: 'scalar', T: 9 /* ScalarType.STRING */, repeated: true},
    {no: 2, name: 'spiffe_id', kind: 'scalar', T: 9 /* ScalarType.STRING */},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JWTSVIDRequest {
    return new JWTSVIDRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JWTSVIDRequest {
    return new JWTSVIDRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JWTSVIDRequest {
    return new JWTSVIDRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: JWTSVIDRequest | PlainMessage<JWTSVIDRequest> | undefined,
    b: JWTSVIDRequest | PlainMessage<JWTSVIDRequest> | undefined,
  ): boolean {
    return proto3.util.equals(JWTSVIDRequest, a, b)
  }
}

/**
 * The JWTSVIDResponse message conveys JWT-SVIDs.
 *
 * @generated from message JWTSVIDResponse
 */
export class JWTSVIDResponse extends Message<JWTSVIDResponse> {
  /**
   * Required. The list of returned JWT-SVIDs.
   *
   * @generated from field: repeated JWTSVID svids = 1;
   */
  svids: JWTSVID[] = []

  constructor(data?: PartialMessage<JWTSVIDResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'JWTSVIDResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'svids', kind: 'message', T: JWTSVID, repeated: true},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JWTSVIDResponse {
    return new JWTSVIDResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JWTSVIDResponse {
    return new JWTSVIDResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JWTSVIDResponse {
    return new JWTSVIDResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: JWTSVIDResponse | PlainMessage<JWTSVIDResponse> | undefined,
    b: JWTSVIDResponse | PlainMessage<JWTSVIDResponse> | undefined,
  ): boolean {
    return proto3.util.equals(JWTSVIDResponse, a, b)
  }
}

/**
 * The JWTSVID message carries the JWT-SVID token and associated metadata.
 *
 * @generated from message JWTSVID
 */
export class JWTSVID extends Message<JWTSVID> {
  /**
   * Required. The SPIFFE ID of the JWT-SVID.
   *
   * @generated from field: string spiffe_id = 1;
   */
  spiffeId = ''

  /**
   * Required. Encoded JWT using JWS Compact Serialization.
   *
   * @generated from field: string svid = 2;
   */
  svid = ''

  /**
   * Optional. An operator-specified string used to provide guidance on how this
   * identity should be used by a workload when more than one SVID is returned.
   * For example, `internal` and `external` to indicate an SVID for internal or
   * external use, respectively.
   *
   * @generated from field: string hint = 3;
   */
  hint = ''

  constructor(data?: PartialMessage<JWTSVID>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'JWTSVID'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'spiffe_id', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 2, name: 'svid', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 3, name: 'hint', kind: 'scalar', T: 9 /* ScalarType.STRING */},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JWTSVID {
    return new JWTSVID().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JWTSVID {
    return new JWTSVID().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JWTSVID {
    return new JWTSVID().fromJsonString(jsonString, options)
  }

  static equals(
    a: JWTSVID | PlainMessage<JWTSVID> | undefined,
    b: JWTSVID | PlainMessage<JWTSVID> | undefined,
  ): boolean {
    return proto3.util.equals(JWTSVID, a, b)
  }
}

/**
 * The JWTBundlesRequest message conveys parameters for requesting JWT bundles.
 * There are currently no such parameters.
 *
 * @generated from message JWTBundlesRequest
 */
export class JWTBundlesRequest extends Message<JWTBundlesRequest> {
  constructor(data?: PartialMessage<JWTBundlesRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'JWTBundlesRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JWTBundlesRequest {
    return new JWTBundlesRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JWTBundlesRequest {
    return new JWTBundlesRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JWTBundlesRequest {
    return new JWTBundlesRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: JWTBundlesRequest | PlainMessage<JWTBundlesRequest> | undefined,
    b: JWTBundlesRequest | PlainMessage<JWTBundlesRequest> | undefined,
  ): boolean {
    return proto3.util.equals(JWTBundlesRequest, a, b)
  }
}

/**
 * The JWTBundlesReponse conveys JWT bundles.
 *
 * @generated from message JWTBundlesResponse
 */
export class JWTBundlesResponse extends Message<JWTBundlesResponse> {
  /**
   * Required. JWK encoded JWT bundles, keyed by the SPIFFE ID of the trust
   * domain.
   *
   * @generated from field: map<string, bytes> bundles = 1;
   */
  bundles: {[key: string]: Uint8Array} = {}

  constructor(data?: PartialMessage<JWTBundlesResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'JWTBundlesResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'bundles',
      kind: 'map',
      K: 9 /* ScalarType.STRING */,
      V: {kind: 'scalar', T: 12 /* ScalarType.BYTES */},
    },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JWTBundlesResponse {
    return new JWTBundlesResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JWTBundlesResponse {
    return new JWTBundlesResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JWTBundlesResponse {
    return new JWTBundlesResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: JWTBundlesResponse | PlainMessage<JWTBundlesResponse> | undefined,
    b: JWTBundlesResponse | PlainMessage<JWTBundlesResponse> | undefined,
  ): boolean {
    return proto3.util.equals(JWTBundlesResponse, a, b)
  }
}

/**
 * The ValidateJWTSVIDRequest message conveys request parameters for
 * JWT-SVID validation.
 *
 * @generated from message ValidateJWTSVIDRequest
 */
export class ValidateJWTSVIDRequest extends Message<ValidateJWTSVIDRequest> {
  /**
   * Required. The audience of the validating party. The JWT-SVID must
   * contain an audience claim which contains this value in order to
   * succesfully validate.
   *
   * @generated from field: string audience = 1;
   */
  audience = ''

  /**
   * Required. The JWT-SVID to validate, encoded using JWS Compact
   * Serialization.
   *
   * @generated from field: string svid = 2;
   */
  svid = ''

  constructor(data?: PartialMessage<ValidateJWTSVIDRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'ValidateJWTSVIDRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'audience', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 2, name: 'svid', kind: 'scalar', T: 9 /* ScalarType.STRING */},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidateJWTSVIDRequest {
    return new ValidateJWTSVIDRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidateJWTSVIDRequest {
    return new ValidateJWTSVIDRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidateJWTSVIDRequest {
    return new ValidateJWTSVIDRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: ValidateJWTSVIDRequest | PlainMessage<ValidateJWTSVIDRequest> | undefined,
    b: ValidateJWTSVIDRequest | PlainMessage<ValidateJWTSVIDRequest> | undefined,
  ): boolean {
    return proto3.util.equals(ValidateJWTSVIDRequest, a, b)
  }
}

/**
 * The ValidateJWTSVIDReponse message conveys the JWT-SVID validation results.
 *
 * @generated from message ValidateJWTSVIDResponse
 */
export class ValidateJWTSVIDResponse extends Message<ValidateJWTSVIDResponse> {
  /**
   * Required. The SPIFFE ID of the validated JWT-SVID.
   *
   * @generated from field: string spiffe_id = 1;
   */
  spiffeId = ''

  /**
   * Required. Claims contained within the payload of the validated JWT-SVID.
   * This includes both SPIFFE-required and non-required claims.
   *
   * @generated from field: google.protobuf.Struct claims = 2;
   */
  claims?: Struct

  constructor(data?: PartialMessage<ValidateJWTSVIDResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'ValidateJWTSVIDResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'spiffe_id', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 2, name: 'claims', kind: 'message', T: Struct},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidateJWTSVIDResponse {
    return new ValidateJWTSVIDResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidateJWTSVIDResponse {
    return new ValidateJWTSVIDResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidateJWTSVIDResponse {
    return new ValidateJWTSVIDResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: ValidateJWTSVIDResponse | PlainMessage<ValidateJWTSVIDResponse> | undefined,
    b: ValidateJWTSVIDResponse | PlainMessage<ValidateJWTSVIDResponse> | undefined,
  ): boolean {
    return proto3.util.equals(ValidateJWTSVIDResponse, a, b)
  }
}
