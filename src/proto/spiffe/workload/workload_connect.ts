// @generated by protoc-gen-connect-es v0.12.0 with parameter "target=ts,import_extension=none"
// @generated from file spiffe/workload/workload.proto (syntax proto3)
/* eslint-disable */
// @ts-nocheck

import {MethodKind} from '@bufbuild/protobuf'
import {
  JWTBundlesRequest,
  JWTBundlesResponse,
  JWTSVIDRequest,
  JWTSVIDResponse,
  ValidateJWTSVIDRequest,
  ValidateJWTSVIDResponse,
  X509BundlesRequest,
  X509BundlesResponse,
  X509SVIDRequest,
  X509SVIDResponse,
} from './workload_pb'

/**
 * ///////////////////////////////////////////////////////////////////////
 * X509-SVID Profile
 * ///////////////////////////////////////////////////////////////////////
 *
 * @generated from service SpiffeWorkloadAPI
 */
export const SpiffeWorkloadAPI = {
  typeName: 'SpiffeWorkloadAPI',
  methods: {
    /**
     * Fetch X.509-SVIDs for all SPIFFE identities the workload is entitled to,
     * as well as related information like trust bundles and CRLs. As this
     * information changes, subsequent messages will be streamed from the
     * server.
     *
     * @generated from rpc SpiffeWorkloadAPI.FetchX509SVID
     */
    fetchX509SVID: {
      name: 'FetchX509SVID',
      I: X509SVIDRequest,
      O: X509SVIDResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * Fetch trust bundles and CRLs. Useful for clients that only need to
     * validate SVIDs without obtaining an SVID for themself. As this
     * information changes, subsequent messages will be streamed from the
     * server.
     *
     * @generated from rpc SpiffeWorkloadAPI.FetchX509Bundles
     */
    fetchX509Bundles: {
      name: 'FetchX509Bundles',
      I: X509BundlesRequest,
      O: X509BundlesResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * Fetch JWT-SVIDs for all SPIFFE identities the workload is entitled to,
     * for the requested audience. If an optional SPIFFE ID is requested, only
     * the JWT-SVID for that SPIFFE ID is returned.
     *
     * @generated from rpc SpiffeWorkloadAPI.FetchJWTSVID
     */
    fetchJWTSVID: {
      name: 'FetchJWTSVID',
      I: JWTSVIDRequest,
      O: JWTSVIDResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Fetches the JWT bundles, formatted as JWKS documents, keyed by the
     * SPIFFE ID of the trust domain. As this information changes, subsequent
     * messages will be streamed from the server.
     *
     * @generated from rpc SpiffeWorkloadAPI.FetchJWTBundles
     */
    fetchJWTBundles: {
      name: 'FetchJWTBundles',
      I: JWTBundlesRequest,
      O: JWTBundlesResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * Validates a JWT-SVID against the requested audience. Returns the SPIFFE
     * ID of the JWT-SVID and JWT claims.
     *
     * @generated from rpc SpiffeWorkloadAPI.ValidateJWTSVID
     */
    validateJWTSVID: {
      name: 'ValidateJWTSVID',
      I: ValidateJWTSVIDRequest,
      O: ValidateJWTSVIDResponse,
      kind: MethodKind.Unary,
    },
  },
} as const
